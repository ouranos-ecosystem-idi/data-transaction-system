// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	traceability "data-spaces-backend/domain/model/traceability"
)

// OuranosRepository is an autogenerated mock type for the OuranosRepository type
type OuranosRepository struct {
	mock.Mock
}

// BatchCreateCFP provides a mock function with given fields: es
func (_m *OuranosRepository) BatchCreateCFP(es traceability.CfpEntityModels) (traceability.CfpEntityModels, error) {
	ret := _m.Called(es)

	if len(ret) == 0 {
		panic("no return value specified for BatchCreateCFP")
	}

	var r0 traceability.CfpEntityModels
	var r1 error
	if rf, ok := ret.Get(0).(func(traceability.CfpEntityModels) (traceability.CfpEntityModels, error)); ok {
		return rf(es)
	}
	if rf, ok := ret.Get(0).(func(traceability.CfpEntityModels) traceability.CfpEntityModels); ok {
		r0 = rf(es)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(traceability.CfpEntityModels)
		}
	}

	if rf, ok := ret.Get(1).(func(traceability.CfpEntityModels) error); ok {
		r1 = rf(es)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountPartsList provides a mock function with given fields: getPlantPartsModel
func (_m *OuranosRepository) CountPartsList(getPlantPartsModel traceability.GetPartsInput) (int, error) {
	ret := _m.Called(getPlantPartsModel)

	if len(ret) == 0 {
		panic("no return value specified for CountPartsList")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(traceability.GetPartsInput) (int, error)); ok {
		return rf(getPlantPartsModel)
	}
	if rf, ok := ret.Get(0).(func(traceability.GetPartsInput) int); ok {
		r0 = rf(getPlantPartsModel)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(traceability.GetPartsInput) error); ok {
		r1 = rf(getPlantPartsModel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountStatus provides a mock function with given fields: operatorID, statusID, traceID, statusTarget
func (_m *OuranosRepository) CountStatus(operatorID string, statusID *string, traceID *string, statusTarget string) (int, error) {
	ret := _m.Called(operatorID, statusID, traceID, statusTarget)

	if len(ret) == 0 {
		panic("no return value specified for CountStatus")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *string, *string, string) (int, error)); ok {
		return rf(operatorID, statusID, traceID, statusTarget)
	}
	if rf, ok := ret.Get(0).(func(string, *string, *string, string) int); ok {
		r0 = rf(operatorID, statusID, traceID, statusTarget)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string, *string, *string, string) error); ok {
		r1 = rf(operatorID, statusID, traceID, statusTarget)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountTradeRequest provides a mock function with given fields: downstreamOperatorID
func (_m *OuranosRepository) CountTradeRequest(downstreamOperatorID string) (int, error) {
	ret := _m.Called(downstreamOperatorID)

	if len(ret) == 0 {
		panic("no return value specified for CountTradeRequest")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(downstreamOperatorID)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(downstreamOperatorID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(downstreamOperatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountTradeResponse provides a mock function with given fields: upstreamOperatorID
func (_m *OuranosRepository) CountTradeResponse(upstreamOperatorID string) (int, error) {
	ret := _m.Called(upstreamOperatorID)

	if len(ret) == 0 {
		panic("no return value specified for CountTradeResponse")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(upstreamOperatorID)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(upstreamOperatorID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(upstreamOperatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCFPInformation provides a mock function with given fields: cfpID
func (_m *OuranosRepository) DeleteCFPInformation(cfpID string) error {
	ret := _m.Called(cfpID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCFPInformation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(cfpID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteParts provides a mock function with given fields: traceID
func (_m *OuranosRepository) DeleteParts(traceID string) error {
	ret := _m.Called(traceID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteParts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(traceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePartsStructure provides a mock function with given fields: traceID
func (_m *OuranosRepository) DeletePartsStructure(traceID string) error {
	ret := _m.Called(traceID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePartsStructure")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(traceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePartsWithCFP provides a mock function with given fields: traceID
func (_m *OuranosRepository) DeletePartsWithCFP(traceID string) error {
	ret := _m.Called(traceID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePartsWithCFP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(traceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRequestStatusByTradeID provides a mock function with given fields: tradeID
func (_m *OuranosRepository) DeleteRequestStatusByTradeID(tradeID string) error {
	ret := _m.Called(tradeID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRequestStatusByTradeID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(tradeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTrade provides a mock function with given fields: tradeID
func (_m *OuranosRepository) DeleteTrade(tradeID string) error {
	ret := _m.Called(tradeID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTrade")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(tradeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCFP provides a mock function with given fields: cfpID, cfpType
func (_m *OuranosRepository) GetCFP(cfpID string, cfpType string) (traceability.CfpEntityModel, error) {
	ret := _m.Called(cfpID, cfpType)

	if len(ret) == 0 {
		panic("no return value specified for GetCFP")
	}

	var r0 traceability.CfpEntityModel
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (traceability.CfpEntityModel, error)); ok {
		return rf(cfpID, cfpType)
	}
	if rf, ok := ret.Get(0).(func(string, string) traceability.CfpEntityModel); ok {
		r0 = rf(cfpID, cfpType)
	} else {
		r0 = ret.Get(0).(traceability.CfpEntityModel)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(cfpID, cfpType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCFPCertifications provides a mock function with given fields: operatorID, traceID
func (_m *OuranosRepository) GetCFPCertifications(operatorID string, traceID string) (traceability.CfpCertificationModels, error) {
	ret := _m.Called(operatorID, traceID)

	if len(ret) == 0 {
		panic("no return value specified for GetCFPCertifications")
	}

	var r0 traceability.CfpCertificationModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (traceability.CfpCertificationModels, error)); ok {
		return rf(operatorID, traceID)
	}
	if rf, ok := ret.Get(0).(func(string, string) traceability.CfpCertificationModels); ok {
		r0 = rf(operatorID, traceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(traceability.CfpCertificationModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(operatorID, traceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCFPInformation provides a mock function with given fields: traceID
func (_m *OuranosRepository) GetCFPInformation(traceID string) (traceability.CfpEntityModel, error) {
	ret := _m.Called(traceID)

	if len(ret) == 0 {
		panic("no return value specified for GetCFPInformation")
	}

	var r0 traceability.CfpEntityModel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (traceability.CfpEntityModel, error)); ok {
		return rf(traceID)
	}
	if rf, ok := ret.Get(0).(func(string) traceability.CfpEntityModel); ok {
		r0 = rf(traceID)
	} else {
		r0 = ret.Get(0).(traceability.CfpEntityModel)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(traceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPartByTraceID provides a mock function with given fields: traceID
func (_m *OuranosRepository) GetPartByTraceID(traceID string) (traceability.PartsModelEntity, error) {
	ret := _m.Called(traceID)

	if len(ret) == 0 {
		panic("no return value specified for GetPartByTraceID")
	}

	var r0 traceability.PartsModelEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (traceability.PartsModelEntity, error)); ok {
		return rf(traceID)
	}
	if rf, ok := ret.Get(0).(func(string) traceability.PartsModelEntity); ok {
		r0 = rf(traceID)
	} else {
		r0 = ret.Get(0).(traceability.PartsModelEntity)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(traceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPartsStructure provides a mock function with given fields: getPartsStructureInput
func (_m *OuranosRepository) GetPartsStructure(getPartsStructureInput traceability.GetPartsStructureInput) (traceability.PartsStructureEntity, error) {
	ret := _m.Called(getPartsStructureInput)

	if len(ret) == 0 {
		panic("no return value specified for GetPartsStructure")
	}

	var r0 traceability.PartsStructureEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(traceability.GetPartsStructureInput) (traceability.PartsStructureEntity, error)); ok {
		return rf(getPartsStructureInput)
	}
	if rf, ok := ret.Get(0).(func(traceability.GetPartsStructureInput) traceability.PartsStructureEntity); ok {
		r0 = rf(getPartsStructureInput)
	} else {
		r0 = ret.Get(0).(traceability.PartsStructureEntity)
	}

	if rf, ok := ret.Get(1).(func(traceability.GetPartsStructureInput) error); ok {
		r1 = rf(getPartsStructureInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPartsStructureByTraceId provides a mock function with given fields: traceID
func (_m *OuranosRepository) GetPartsStructureByTraceId(traceID string) (traceability.PartsStructureEntityModel, error) {
	ret := _m.Called(traceID)

	if len(ret) == 0 {
		panic("no return value specified for GetPartsStructureByTraceId")
	}

	var r0 traceability.PartsStructureEntityModel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (traceability.PartsStructureEntityModel, error)); ok {
		return rf(traceID)
	}
	if rf, ok := ret.Get(0).(func(string) traceability.PartsStructureEntityModel); ok {
		r0 = rf(traceID)
	} else {
		r0 = ret.Get(0).(traceability.PartsStructureEntityModel)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(traceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatus provides a mock function with given fields: operatorID, limit, statusID, traceID, statusTarget
func (_m *OuranosRepository) GetStatus(operatorID string, limit int, statusID *string, traceID *string, statusTarget string) (traceability.StatusEntityModels, error) {
	ret := _m.Called(operatorID, limit, statusID, traceID, statusTarget)

	if len(ret) == 0 {
		panic("no return value specified for GetStatus")
	}

	var r0 traceability.StatusEntityModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, *string, *string, string) (traceability.StatusEntityModels, error)); ok {
		return rf(operatorID, limit, statusID, traceID, statusTarget)
	}
	if rf, ok := ret.Get(0).(func(string, int, *string, *string, string) traceability.StatusEntityModels); ok {
		r0 = rf(operatorID, limit, statusID, traceID, statusTarget)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(traceability.StatusEntityModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, *string, *string, string) error); ok {
		r1 = rf(operatorID, limit, statusID, traceID, statusTarget)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatusByTradeID provides a mock function with given fields: tradeID
func (_m *OuranosRepository) GetStatusByTradeID(tradeID string) (traceability.StatusEntityModel, error) {
	ret := _m.Called(tradeID)

	if len(ret) == 0 {
		panic("no return value specified for GetStatusByTradeID")
	}

	var r0 traceability.StatusEntityModel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (traceability.StatusEntityModel, error)); ok {
		return rf(tradeID)
	}
	if rf, ok := ret.Get(0).(func(string) traceability.StatusEntityModel); ok {
		r0 = rf(tradeID)
	} else {
		r0 = ret.Get(0).(traceability.StatusEntityModel)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tradeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrade provides a mock function with given fields: tradeID
func (_m *OuranosRepository) GetTrade(tradeID string) (traceability.TradeEntityModel, error) {
	ret := _m.Called(tradeID)

	if len(ret) == 0 {
		panic("no return value specified for GetTrade")
	}

	var r0 traceability.TradeEntityModel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (traceability.TradeEntityModel, error)); ok {
		return rf(tradeID)
	}
	if rf, ok := ret.Get(0).(func(string) traceability.TradeEntityModel); ok {
		r0 = rf(tradeID)
	} else {
		r0 = ret.Get(0).(traceability.TradeEntityModel)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tradeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTradeByDownstreamTraceID provides a mock function with given fields: donwstreamTraceID
func (_m *OuranosRepository) GetTradeByDownstreamTraceID(donwstreamTraceID string) (traceability.TradeEntityModel, error) {
	ret := _m.Called(donwstreamTraceID)

	if len(ret) == 0 {
		panic("no return value specified for GetTradeByDownstreamTraceID")
	}

	var r0 traceability.TradeEntityModel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (traceability.TradeEntityModel, error)); ok {
		return rf(donwstreamTraceID)
	}
	if rf, ok := ret.Get(0).(func(string) traceability.TradeEntityModel); ok {
		r0 = rf(donwstreamTraceID)
	} else {
		r0 = ret.Get(0).(traceability.TradeEntityModel)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(donwstreamTraceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTradeRequest provides a mock function with given fields: downstreamOperatorID, limit, traceIDs
func (_m *OuranosRepository) GetTradeRequest(downstreamOperatorID string, limit int, traceIDs []string) (traceability.TradeEntityModels, error) {
	ret := _m.Called(downstreamOperatorID, limit, traceIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetTradeRequest")
	}

	var r0 traceability.TradeEntityModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, []string) (traceability.TradeEntityModels, error)); ok {
		return rf(downstreamOperatorID, limit, traceIDs)
	}
	if rf, ok := ret.Get(0).(func(string, int, []string) traceability.TradeEntityModels); ok {
		r0 = rf(downstreamOperatorID, limit, traceIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(traceability.TradeEntityModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, []string) error); ok {
		r1 = rf(downstreamOperatorID, limit, traceIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTradeResponse provides a mock function with given fields: upstreamOperatorID, limit
func (_m *OuranosRepository) GetTradeResponse(upstreamOperatorID string, limit int) (traceability.TradeEntityModels, error) {
	ret := _m.Called(upstreamOperatorID, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetTradeResponse")
	}

	var r0 traceability.TradeEntityModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) (traceability.TradeEntityModels, error)); ok {
		return rf(upstreamOperatorID, limit)
	}
	if rf, ok := ret.Get(0).(func(string, int) traceability.TradeEntityModels); ok {
		r0 = rf(upstreamOperatorID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(traceability.TradeEntityModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(upstreamOperatorID, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCFPsByTraceID provides a mock function with given fields: traceID
func (_m *OuranosRepository) ListCFPsByTraceID(traceID string) (traceability.CfpEntityModels, error) {
	ret := _m.Called(traceID)

	if len(ret) == 0 {
		panic("no return value specified for ListCFPsByTraceID")
	}

	var r0 traceability.CfpEntityModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (traceability.CfpEntityModels, error)); ok {
		return rf(traceID)
	}
	if rf, ok := ret.Get(0).(func(string) traceability.CfpEntityModels); ok {
		r0 = rf(traceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(traceability.CfpEntityModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(traceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChildPartsStructureByTraceId provides a mock function with given fields: traceID
func (_m *OuranosRepository) ListChildPartsStructureByTraceId(traceID string) (traceability.PartsStructureEntityModels, error) {
	ret := _m.Called(traceID)

	if len(ret) == 0 {
		panic("no return value specified for ListChildPartsStructureByTraceId")
	}

	var r0 traceability.PartsStructureEntityModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (traceability.PartsStructureEntityModels, error)); ok {
		return rf(traceID)
	}
	if rf, ok := ret.Get(0).(func(string) traceability.PartsStructureEntityModels); ok {
		r0 = rf(traceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(traceability.PartsStructureEntityModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(traceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListParentPartsStructureByTraceId provides a mock function with given fields: traceID
func (_m *OuranosRepository) ListParentPartsStructureByTraceId(traceID string) (traceability.PartsStructureEntityModels, error) {
	ret := _m.Called(traceID)

	if len(ret) == 0 {
		panic("no return value specified for ListParentPartsStructureByTraceId")
	}

	var r0 traceability.PartsStructureEntityModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (traceability.PartsStructureEntityModels, error)); ok {
		return rf(traceID)
	}
	if rf, ok := ret.Get(0).(func(string) traceability.PartsStructureEntityModels); ok {
		r0 = rf(traceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(traceability.PartsStructureEntityModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(traceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListParts provides a mock function with given fields: getPlantPartsModel
func (_m *OuranosRepository) ListParts(getPlantPartsModel traceability.GetPartsInput) (traceability.PartsModelEntities, error) {
	ret := _m.Called(getPlantPartsModel)

	if len(ret) == 0 {
		panic("no return value specified for ListParts")
	}

	var r0 traceability.PartsModelEntities
	var r1 error
	if rf, ok := ret.Get(0).(func(traceability.GetPartsInput) (traceability.PartsModelEntities, error)); ok {
		return rf(getPlantPartsModel)
	}
	if rf, ok := ret.Get(0).(func(traceability.GetPartsInput) traceability.PartsModelEntities); ok {
		r0 = rf(getPlantPartsModel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(traceability.PartsModelEntities)
		}
	}

	if rf, ok := ret.Get(1).(func(traceability.GetPartsInput) error); ok {
		r1 = rf(getPlantPartsModel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTradeByDownstreamTraceID provides a mock function with given fields: downstreamTraceID
func (_m *OuranosRepository) ListTradeByDownstreamTraceID(downstreamTraceID string) (traceability.TradeEntityModels, error) {
	ret := _m.Called(downstreamTraceID)

	if len(ret) == 0 {
		panic("no return value specified for ListTradeByDownstreamTraceID")
	}

	var r0 traceability.TradeEntityModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (traceability.TradeEntityModels, error)); ok {
		return rf(downstreamTraceID)
	}
	if rf, ok := ret.Get(0).(func(string) traceability.TradeEntityModels); ok {
		r0 = rf(downstreamTraceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(traceability.TradeEntityModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(downstreamTraceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTradeByUpstreamTraceID provides a mock function with given fields: upstreamTraceID
func (_m *OuranosRepository) ListTradeByUpstreamTraceID(upstreamTraceID string) (traceability.TradeEntityModels, error) {
	ret := _m.Called(upstreamTraceID)

	if len(ret) == 0 {
		panic("no return value specified for ListTradeByUpstreamTraceID")
	}

	var r0 traceability.TradeEntityModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (traceability.TradeEntityModels, error)); ok {
		return rf(upstreamTraceID)
	}
	if rf, ok := ret.Get(0).(func(string) traceability.TradeEntityModels); ok {
		r0 = rf(upstreamTraceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(traceability.TradeEntityModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(upstreamTraceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTradesByOperatorID provides a mock function with given fields: operatorID
func (_m *OuranosRepository) ListTradesByOperatorID(operatorID string) (traceability.TradeEntityModels, error) {
	ret := _m.Called(operatorID)

	if len(ret) == 0 {
		panic("no return value specified for ListTradesByOperatorID")
	}

	var r0 traceability.TradeEntityModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (traceability.TradeEntityModels, error)); ok {
		return rf(operatorID)
	}
	if rf, ok := ret.Get(0).(func(string) traceability.TradeEntityModels); ok {
		r0 = rf(operatorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(traceability.TradeEntityModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(operatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutCFP provides a mock function with given fields: e
func (_m *OuranosRepository) PutCFP(e traceability.CfpEntityModel) (traceability.CfpEntityModel, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for PutCFP")
	}

	var r0 traceability.CfpEntityModel
	var r1 error
	if rf, ok := ret.Get(0).(func(traceability.CfpEntityModel) (traceability.CfpEntityModel, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(traceability.CfpEntityModel) traceability.CfpEntityModel); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Get(0).(traceability.CfpEntityModel)
	}

	if rf, ok := ret.Get(1).(func(traceability.CfpEntityModel) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPartsStructure provides a mock function with given fields: partsStructure
func (_m *OuranosRepository) PutPartsStructure(partsStructure traceability.PartsStructureModel) (traceability.PartsStructureEntity, error) {
	ret := _m.Called(partsStructure)

	if len(ret) == 0 {
		panic("no return value specified for PutPartsStructure")
	}

	var r0 traceability.PartsStructureEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(traceability.PartsStructureModel) (traceability.PartsStructureEntity, error)); ok {
		return rf(partsStructure)
	}
	if rf, ok := ret.Get(0).(func(traceability.PartsStructureModel) traceability.PartsStructureEntity); ok {
		r0 = rf(partsStructure)
	} else {
		r0 = ret.Get(0).(traceability.PartsStructureEntity)
	}

	if rf, ok := ret.Get(1).(func(traceability.PartsStructureModel) error); ok {
		r1 = rf(partsStructure)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutStatusCancel provides a mock function with given fields: statusID, operatorID
func (_m *OuranosRepository) PutStatusCancel(statusID string, operatorID string) error {
	ret := _m.Called(statusID, operatorID)

	if len(ret) == 0 {
		panic("no return value specified for PutStatusCancel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(statusID, operatorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutStatusReject provides a mock function with given fields: statusID, replyMessage, operatorID
func (_m *OuranosRepository) PutStatusReject(statusID string, replyMessage *string, operatorID string) (traceability.StatusEntityModel, error) {
	ret := _m.Called(statusID, replyMessage, operatorID)

	if len(ret) == 0 {
		panic("no return value specified for PutStatusReject")
	}

	var r0 traceability.StatusEntityModel
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *string, string) (traceability.StatusEntityModel, error)); ok {
		return rf(statusID, replyMessage, operatorID)
	}
	if rf, ok := ret.Get(0).(func(string, *string, string) traceability.StatusEntityModel); ok {
		r0 = rf(statusID, replyMessage, operatorID)
	} else {
		r0 = ret.Get(0).(traceability.StatusEntityModel)
	}

	if rf, ok := ret.Get(1).(func(string, *string, string) error); ok {
		r1 = rf(statusID, replyMessage, operatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutTradeRequest provides a mock function with given fields: tradeRequestEntityModel
func (_m *OuranosRepository) PutTradeRequest(tradeRequestEntityModel traceability.TradeRequestEntityModel) (traceability.TradeRequestEntityModel, error) {
	ret := _m.Called(tradeRequestEntityModel)

	if len(ret) == 0 {
		panic("no return value specified for PutTradeRequest")
	}

	var r0 traceability.TradeRequestEntityModel
	var r1 error
	if rf, ok := ret.Get(0).(func(traceability.TradeRequestEntityModel) (traceability.TradeRequestEntityModel, error)); ok {
		return rf(tradeRequestEntityModel)
	}
	if rf, ok := ret.Get(0).(func(traceability.TradeRequestEntityModel) traceability.TradeRequestEntityModel); ok {
		r0 = rf(tradeRequestEntityModel)
	} else {
		r0 = ret.Get(0).(traceability.TradeRequestEntityModel)
	}

	if rf, ok := ret.Get(1).(func(traceability.TradeRequestEntityModel) error); ok {
		r1 = rf(tradeRequestEntityModel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutTradeResponse provides a mock function with given fields: putTradeResponseInput, requestStatusValue
func (_m *OuranosRepository) PutTradeResponse(putTradeResponseInput traceability.PutTradeResponseInput, requestStatusValue traceability.RequestStatus) (traceability.TradeEntityModel, error) {
	ret := _m.Called(putTradeResponseInput, requestStatusValue)

	if len(ret) == 0 {
		panic("no return value specified for PutTradeResponse")
	}

	var r0 traceability.TradeEntityModel
	var r1 error
	if rf, ok := ret.Get(0).(func(traceability.PutTradeResponseInput, traceability.RequestStatus) (traceability.TradeEntityModel, error)); ok {
		return rf(putTradeResponseInput, requestStatusValue)
	}
	if rf, ok := ret.Get(0).(func(traceability.PutTradeResponseInput, traceability.RequestStatus) traceability.TradeEntityModel); ok {
		r0 = rf(putTradeResponseInput, requestStatusValue)
	} else {
		r0 = ret.Get(0).(traceability.TradeEntityModel)
	}

	if rf, ok := ret.Get(1).(func(traceability.PutTradeResponseInput, traceability.RequestStatus) error); ok {
		r1 = rf(putTradeResponseInput, requestStatusValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOuranosRepository creates a new instance of OuranosRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOuranosRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OuranosRepository {
	mock := &OuranosRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
