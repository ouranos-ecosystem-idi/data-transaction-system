// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	traceability "data-spaces-backend/domain/model/traceability"
)

// ICfpCertificationUsecase is an autogenerated mock type for the ICfpCertificationUsecase type
type ICfpCertificationUsecase struct {
	mock.Mock
}

// GetCfpCertification provides a mock function with given fields: c, getCfpCertificationModel
func (_m *ICfpCertificationUsecase) GetCfpCertification(c echo.Context, getCfpCertificationModel traceability.GetCfpCertificationModel) (traceability.CfpCertificationModels, error) {
	ret := _m.Called(c, getCfpCertificationModel)

	var r0 traceability.CfpCertificationModels
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, traceability.GetCfpCertificationModel) (traceability.CfpCertificationModels, error)); ok {
		return rf(c, getCfpCertificationModel)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, traceability.GetCfpCertificationModel) traceability.CfpCertificationModels); ok {
		r0 = rf(c, getCfpCertificationModel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(traceability.CfpCertificationModels)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, traceability.GetCfpCertificationModel) error); ok {
		r1 = rf(c, getCfpCertificationModel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewICfpCertificationUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewICfpCertificationUsecase creates a new instance of ICfpCertificationUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewICfpCertificationUsecase(t mockConstructorTestingTNewICfpCertificationUsecase) *ICfpCertificationUsecase {
	mock := &ICfpCertificationUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
