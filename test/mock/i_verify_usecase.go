// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	input "data-spaces-backend/usecase/input"
	mock "github.com/stretchr/testify/mock"

	output "data-spaces-backend/usecase/output"
)

// IVerifyUsecase is an autogenerated mock type for the IVerifyUsecase type
type IVerifyUsecase struct {
	mock.Mock
}

// VerifyAPIKey provides a mock function with given fields: _a0
func (_m *IVerifyUsecase) VerifyAPIKey(_a0 input.VerifyAPIKey) (output.VerifyAPIKey, error) {
	ret := _m.Called(_a0)

	var r0 output.VerifyAPIKey
	var r1 error
	if rf, ok := ret.Get(0).(func(input.VerifyAPIKey) (output.VerifyAPIKey, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(input.VerifyAPIKey) output.VerifyAPIKey); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(output.VerifyAPIKey)
	}

	if rf, ok := ret.Get(1).(func(input.VerifyAPIKey) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyToken provides a mock function with given fields: _a0
func (_m *IVerifyUsecase) VerifyToken(_a0 input.VerifyToken) (output.VerifyToken, error) {
	ret := _m.Called(_a0)

	var r0 output.VerifyToken
	var r1 error
	if rf, ok := ret.Get(0).(func(input.VerifyToken) (output.VerifyToken, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(input.VerifyToken) output.VerifyToken); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(output.VerifyToken)
	}

	if rf, ok := ret.Get(1).(func(input.VerifyToken) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIVerifyUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewIVerifyUsecase creates a new instance of IVerifyUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIVerifyUsecase(t mockConstructorTestingTNewIVerifyUsecase) *IVerifyUsecase {
	mock := &IVerifyUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
