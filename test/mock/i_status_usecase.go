// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	common "data-spaces-backend/domain/common"

	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"

	traceability "data-spaces-backend/domain/model/traceability"
)

// IStatusUsecase is an autogenerated mock type for the IStatusUsecase type
type IStatusUsecase struct {
	mock.Mock
}

// GetStatus provides a mock function with given fields: c, getStatusInput
func (_m *IStatusUsecase) GetStatus(c echo.Context, getStatusInput traceability.GetStatusInput) ([]traceability.StatusModel, *string, error) {
	ret := _m.Called(c, getStatusInput)

	if len(ret) == 0 {
		panic("no return value specified for GetStatus")
	}

	var r0 []traceability.StatusModel
	var r1 *string
	var r2 error
	if rf, ok := ret.Get(0).(func(echo.Context, traceability.GetStatusInput) ([]traceability.StatusModel, *string, error)); ok {
		return rf(c, getStatusInput)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, traceability.GetStatusInput) []traceability.StatusModel); ok {
		r0 = rf(c, getStatusInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]traceability.StatusModel)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, traceability.GetStatusInput) *string); ok {
		r1 = rf(c, getStatusInput)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	if rf, ok := ret.Get(2).(func(echo.Context, traceability.GetStatusInput) error); ok {
		r2 = rf(c, getStatusInput)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PutStatusCancel provides a mock function with given fields: c, putStatusInput
func (_m *IStatusUsecase) PutStatusCancel(c echo.Context, putStatusInput traceability.PutStatusInput) (common.ResponseHeaders, error) {
	ret := _m.Called(c, putStatusInput)

	if len(ret) == 0 {
		panic("no return value specified for PutStatusCancel")
	}

	var r0 common.ResponseHeaders
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, traceability.PutStatusInput) (common.ResponseHeaders, error)); ok {
		return rf(c, putStatusInput)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, traceability.PutStatusInput) common.ResponseHeaders); ok {
		r0 = rf(c, putStatusInput)
	} else {
		r0 = ret.Get(0).(common.ResponseHeaders)
	}

	if rf, ok := ret.Get(1).(func(echo.Context, traceability.PutStatusInput) error); ok {
		r1 = rf(c, putStatusInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutStatusReject provides a mock function with given fields: c, putStatusInput
func (_m *IStatusUsecase) PutStatusReject(c echo.Context, putStatusInput traceability.PutStatusInput) (common.ResponseHeaders, error) {
	ret := _m.Called(c, putStatusInput)

	if len(ret) == 0 {
		panic("no return value specified for PutStatusReject")
	}

	var r0 common.ResponseHeaders
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, traceability.PutStatusInput) (common.ResponseHeaders, error)); ok {
		return rf(c, putStatusInput)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, traceability.PutStatusInput) common.ResponseHeaders); ok {
		r0 = rf(c, putStatusInput)
	} else {
		r0 = ret.Get(0).(common.ResponseHeaders)
	}

	if rf, ok := ret.Get(1).(func(echo.Context, traceability.PutStatusInput) error); ok {
		r1 = rf(c, putStatusInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIStatusUsecase creates a new instance of IStatusUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIStatusUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IStatusUsecase {
	mock := &IStatusUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
