// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	traceabilityentity "data-spaces-backend/domain/model/traceability/traceabilityentity"
)

// TraceabilityRepository is an autogenerated mock type for the TraceabilityRepository type
type TraceabilityRepository struct {
	mock.Mock
}

// GetCfp provides a mock function with given fields: c, request
func (_m *TraceabilityRepository) GetCfp(c echo.Context, request traceabilityentity.GetCfpRequest) (traceabilityentity.GetCfpResponses, error) {
	ret := _m.Called(c, request)

	var r0 traceabilityentity.GetCfpResponses
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, traceabilityentity.GetCfpRequest) (traceabilityentity.GetCfpResponses, error)); ok {
		return rf(c, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, traceabilityentity.GetCfpRequest) traceabilityentity.GetCfpResponses); ok {
		r0 = rf(c, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(traceabilityentity.GetCfpResponses)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, traceabilityentity.GetCfpRequest) error); ok {
		r1 = rf(c, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCfpCertifications provides a mock function with given fields: c, request
func (_m *TraceabilityRepository) GetCfpCertifications(c echo.Context, request traceabilityentity.GetCfpCertificationsRequest) (traceabilityentity.GetCfpCertificationsResponse, error) {
	ret := _m.Called(c, request)

	var r0 traceabilityentity.GetCfpCertificationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, traceabilityentity.GetCfpCertificationsRequest) (traceabilityentity.GetCfpCertificationsResponse, error)); ok {
		return rf(c, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, traceabilityentity.GetCfpCertificationsRequest) traceabilityentity.GetCfpCertificationsResponse); ok {
		r0 = rf(c, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(traceabilityentity.GetCfpCertificationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, traceabilityentity.GetCfpCertificationsRequest) error); ok {
		r1 = rf(c, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParts provides a mock function with given fields: c, request, limit
func (_m *TraceabilityRepository) GetParts(c echo.Context, request traceabilityentity.GetPartsRequest, limit int) (traceabilityentity.GetPartsResponse, error) {
	ret := _m.Called(c, request, limit)

	var r0 traceabilityentity.GetPartsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, traceabilityentity.GetPartsRequest, int) (traceabilityentity.GetPartsResponse, error)); ok {
		return rf(c, request, limit)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, traceabilityentity.GetPartsRequest, int) traceabilityentity.GetPartsResponse); ok {
		r0 = rf(c, request, limit)
	} else {
		r0 = ret.Get(0).(traceabilityentity.GetPartsResponse)
	}

	if rf, ok := ret.Get(1).(func(echo.Context, traceabilityentity.GetPartsRequest, int) error); ok {
		r1 = rf(c, request, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPartsStructures provides a mock function with given fields: c, request
func (_m *TraceabilityRepository) GetPartsStructures(c echo.Context, request traceabilityentity.GetPartsStructuresRequest) (traceabilityentity.GetPartsStructuresResponse, error) {
	ret := _m.Called(c, request)

	var r0 traceabilityentity.GetPartsStructuresResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, traceabilityentity.GetPartsStructuresRequest) (traceabilityentity.GetPartsStructuresResponse, error)); ok {
		return rf(c, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, traceabilityentity.GetPartsStructuresRequest) traceabilityentity.GetPartsStructuresResponse); ok {
		r0 = rf(c, request)
	} else {
		r0 = ret.Get(0).(traceabilityentity.GetPartsStructuresResponse)
	}

	if rf, ok := ret.Get(1).(func(echo.Context, traceabilityentity.GetPartsStructuresRequest) error); ok {
		r1 = rf(c, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTradeRequests provides a mock function with given fields: c, request
func (_m *TraceabilityRepository) GetTradeRequests(c echo.Context, request traceabilityentity.GetTradeRequestsRequest) (traceabilityentity.GetTradeRequestsResponse, error) {
	ret := _m.Called(c, request)

	var r0 traceabilityentity.GetTradeRequestsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, traceabilityentity.GetTradeRequestsRequest) (traceabilityentity.GetTradeRequestsResponse, error)); ok {
		return rf(c, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, traceabilityentity.GetTradeRequestsRequest) traceabilityentity.GetTradeRequestsResponse); ok {
		r0 = rf(c, request)
	} else {
		r0 = ret.Get(0).(traceabilityentity.GetTradeRequestsResponse)
	}

	if rf, ok := ret.Get(1).(func(echo.Context, traceabilityentity.GetTradeRequestsRequest) error); ok {
		r1 = rf(c, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTradeRequestsReceived provides a mock function with given fields: c, request
func (_m *TraceabilityRepository) GetTradeRequestsReceived(c echo.Context, request traceabilityentity.GetTradeRequestsReceivedRequest) (traceabilityentity.GetTradeRequestsReceivedResponse, error) {
	ret := _m.Called(c, request)

	var r0 traceabilityentity.GetTradeRequestsReceivedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, traceabilityentity.GetTradeRequestsReceivedRequest) (traceabilityentity.GetTradeRequestsReceivedResponse, error)); ok {
		return rf(c, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, traceabilityentity.GetTradeRequestsReceivedRequest) traceabilityentity.GetTradeRequestsReceivedResponse); ok {
		r0 = rf(c, request)
	} else {
		r0 = ret.Get(0).(traceabilityentity.GetTradeRequestsReceivedResponse)
	}

	if rf, ok := ret.Get(1).(func(echo.Context, traceabilityentity.GetTradeRequestsReceivedRequest) error); ok {
		r1 = rf(c, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostCfp provides a mock function with given fields: c, requests
func (_m *TraceabilityRepository) PostCfp(c echo.Context, requests traceabilityentity.PostCfpRequest) (traceabilityentity.PostCfpResponses, error) {
	ret := _m.Called(c, requests)

	var r0 traceabilityentity.PostCfpResponses
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, traceabilityentity.PostCfpRequest) (traceabilityentity.PostCfpResponses, error)); ok {
		return rf(c, requests)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, traceabilityentity.PostCfpRequest) traceabilityentity.PostCfpResponses); ok {
		r0 = rf(c, requests)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(traceabilityentity.PostCfpResponses)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, traceabilityentity.PostCfpRequest) error); ok {
		r1 = rf(c, requests)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostPartsStructures provides a mock function with given fields: c, request
func (_m *TraceabilityRepository) PostPartsStructures(c echo.Context, request traceabilityentity.PostPartsStructuresRequest) (traceabilityentity.PostPartsStructuresResponse, error) {
	ret := _m.Called(c, request)

	var r0 traceabilityentity.PostPartsStructuresResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, traceabilityentity.PostPartsStructuresRequest) (traceabilityentity.PostPartsStructuresResponse, error)); ok {
		return rf(c, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, traceabilityentity.PostPartsStructuresRequest) traceabilityentity.PostPartsStructuresResponse); ok {
		r0 = rf(c, request)
	} else {
		r0 = ret.Get(0).(traceabilityentity.PostPartsStructuresResponse)
	}

	if rf, ok := ret.Get(1).(func(echo.Context, traceabilityentity.PostPartsStructuresRequest) error); ok {
		r1 = rf(c, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostTradeRequests provides a mock function with given fields: c, request
func (_m *TraceabilityRepository) PostTradeRequests(c echo.Context, request traceabilityentity.PostTradeRequestsRequest) (traceabilityentity.PostTradeRequestsResponses, error) {
	ret := _m.Called(c, request)

	var r0 traceabilityentity.PostTradeRequestsResponses
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, traceabilityentity.PostTradeRequestsRequest) (traceabilityentity.PostTradeRequestsResponses, error)); ok {
		return rf(c, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, traceabilityentity.PostTradeRequestsRequest) traceabilityentity.PostTradeRequestsResponses); ok {
		r0 = rf(c, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(traceabilityentity.PostTradeRequestsResponses)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, traceabilityentity.PostTradeRequestsRequest) error); ok {
		r1 = rf(c, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostTradeRequestsCancel provides a mock function with given fields: c, request
func (_m *TraceabilityRepository) PostTradeRequestsCancel(c echo.Context, request traceabilityentity.PostTradeRequestsCancelRequest) (traceabilityentity.PostTradeRequestsCancelResponse, error) {
	ret := _m.Called(c, request)

	var r0 traceabilityentity.PostTradeRequestsCancelResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, traceabilityentity.PostTradeRequestsCancelRequest) (traceabilityentity.PostTradeRequestsCancelResponse, error)); ok {
		return rf(c, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, traceabilityentity.PostTradeRequestsCancelRequest) traceabilityentity.PostTradeRequestsCancelResponse); ok {
		r0 = rf(c, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(traceabilityentity.PostTradeRequestsCancelResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, traceabilityentity.PostTradeRequestsCancelRequest) error); ok {
		r1 = rf(c, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostTradeRequestsReject provides a mock function with given fields: c, request
func (_m *TraceabilityRepository) PostTradeRequestsReject(c echo.Context, request traceabilityentity.PostTradeRequestsRejectRequest) (traceabilityentity.PostTradeRequestsRejectResponse, error) {
	ret := _m.Called(c, request)

	var r0 traceabilityentity.PostTradeRequestsRejectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, traceabilityentity.PostTradeRequestsRejectRequest) (traceabilityentity.PostTradeRequestsRejectResponse, error)); ok {
		return rf(c, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, traceabilityentity.PostTradeRequestsRejectRequest) traceabilityentity.PostTradeRequestsRejectResponse); ok {
		r0 = rf(c, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(traceabilityentity.PostTradeRequestsRejectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, traceabilityentity.PostTradeRequestsRejectRequest) error); ok {
		r1 = rf(c, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostTrades provides a mock function with given fields: c, request
func (_m *TraceabilityRepository) PostTrades(c echo.Context, request traceabilityentity.PostTradesRequest) (traceabilityentity.PostTradesResponse, error) {
	ret := _m.Called(c, request)

	var r0 traceabilityentity.PostTradesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, traceabilityentity.PostTradesRequest) (traceabilityentity.PostTradesResponse, error)); ok {
		return rf(c, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, traceabilityentity.PostTradesRequest) traceabilityentity.PostTradesResponse); ok {
		r0 = rf(c, request)
	} else {
		r0 = ret.Get(0).(traceabilityentity.PostTradesResponse)
	}

	if rf, ok := ret.Get(1).(func(echo.Context, traceabilityentity.PostTradesRequest) error); ok {
		r1 = rf(c, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTraceabilityRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTraceabilityRepository creates a new instance of TraceabilityRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTraceabilityRepository(t mockConstructorTestingTNewTraceabilityRepository) *TraceabilityRepository {
	mock := &TraceabilityRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
