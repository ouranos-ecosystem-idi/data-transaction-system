// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	traceability "data-spaces-backend/domain/model/traceability"
	mock "github.com/stretchr/testify/mock"
)

// OuranosUseCase is an autogenerated mock type for the OuranosUseCase type
type OuranosUseCase struct {
	mock.Mock
}

// GetPartsList provides a mock function with given fields: getPlantPartsModel
func (_m *OuranosUseCase) GetPartsList(getPlantPartsModel traceability.GetPartsModel) ([]traceability.PartsModel, error) {
	ret := _m.Called(getPlantPartsModel)

	var r0 []traceability.PartsModel
	var r1 error
	if rf, ok := ret.Get(0).(func(traceability.GetPartsModel) ([]traceability.PartsModel, error)); ok {
		return rf(getPlantPartsModel)
	}
	if rf, ok := ret.Get(0).(func(traceability.GetPartsModel) []traceability.PartsModel); ok {
		r0 = rf(getPlantPartsModel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]traceability.PartsModel)
		}
	}

	if rf, ok := ret.Get(1).(func(traceability.GetPartsModel) error); ok {
		r1 = rf(getPlantPartsModel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPartsStructures provides a mock function with given fields: getPartsStructureModel
func (_m *OuranosUseCase) GetPartsStructures(getPartsStructureModel traceability.GetPartsStructure) ([]traceability.PartsStructureModel, error) {
	ret := _m.Called(getPartsStructureModel)

	var r0 []traceability.PartsStructureModel
	var r1 error
	if rf, ok := ret.Get(0).(func(traceability.GetPartsStructure) ([]traceability.PartsStructureModel, error)); ok {
		return rf(getPartsStructureModel)
	}
	if rf, ok := ret.Get(0).(func(traceability.GetPartsStructure) []traceability.PartsStructureModel); ok {
		r0 = rf(getPartsStructureModel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]traceability.PartsStructureModel)
		}
	}

	if rf, ok := ret.Get(1).(func(traceability.GetPartsStructure) error); ok {
		r1 = rf(getPartsStructureModel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPartsStructures provides a mock function with given fields: partsStructureModel
func (_m *OuranosUseCase) PutPartsStructures(partsStructureModel []traceability.PartsStructureModel) (int64, error) {
	ret := _m.Called(partsStructureModel)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func([]traceability.PartsStructureModel) (int64, error)); ok {
		return rf(partsStructureModel)
	}
	if rf, ok := ret.Get(0).(func([]traceability.PartsStructureModel) int64); ok {
		r0 = rf(partsStructureModel)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func([]traceability.PartsStructureModel) error); ok {
		r1 = rf(partsStructureModel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOuranosUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewOuranosUseCase creates a new instance of OuranosUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOuranosUseCase(t mockConstructorTestingTNewOuranosUseCase) *OuranosUseCase {
	mock := &OuranosUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
