// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	traceability "data-spaces-backend/domain/model/traceability"
)

// IPartsStructureUsecase is an autogenerated mock type for the IPartsStructureUsecase type
type IPartsStructureUsecase struct {
	mock.Mock
}

// GetPartsStructure provides a mock function with given fields: c, getPartsStructureModel
func (_m *IPartsStructureUsecase) GetPartsStructure(c echo.Context, getPartsStructureModel traceability.GetPartsStructureModel) (traceability.PartsStructureModel, error) {
	ret := _m.Called(c, getPartsStructureModel)

	var r0 traceability.PartsStructureModel
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, traceability.GetPartsStructureModel) (traceability.PartsStructureModel, error)); ok {
		return rf(c, getPartsStructureModel)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, traceability.GetPartsStructureModel) traceability.PartsStructureModel); ok {
		r0 = rf(c, getPartsStructureModel)
	} else {
		r0 = ret.Get(0).(traceability.PartsStructureModel)
	}

	if rf, ok := ret.Get(1).(func(echo.Context, traceability.GetPartsStructureModel) error); ok {
		r1 = rf(c, getPartsStructureModel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPartsStructure provides a mock function with given fields: c, partsStructureModel
func (_m *IPartsStructureUsecase) PutPartsStructure(c echo.Context, partsStructureModel traceability.PartsStructureModel) (traceability.PartsStructureModel, error) {
	ret := _m.Called(c, partsStructureModel)

	var r0 traceability.PartsStructureModel
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, traceability.PartsStructureModel) (traceability.PartsStructureModel, error)); ok {
		return rf(c, partsStructureModel)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, traceability.PartsStructureModel) traceability.PartsStructureModel); ok {
		r0 = rf(c, partsStructureModel)
	} else {
		r0 = ret.Get(0).(traceability.PartsStructureModel)
	}

	if rf, ok := ret.Get(1).(func(echo.Context, traceability.PartsStructureModel) error); ok {
		r1 = rf(c, partsStructureModel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIPartsStructureUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewIPartsStructureUsecase creates a new instance of IPartsStructureUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPartsStructureUsecase(t mockConstructorTestingTNewIPartsStructureUsecase) *IPartsStructureUsecase {
	mock := &IPartsStructureUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
