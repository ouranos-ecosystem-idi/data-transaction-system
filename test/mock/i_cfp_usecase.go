// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	common "data-spaces-backend/domain/common"

	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"

	traceability "data-spaces-backend/domain/model/traceability"
)

// ICfpUsecase is an autogenerated mock type for the ICfpUsecase type
type ICfpUsecase struct {
	mock.Mock
}

// GetCfp provides a mock function with given fields: c, getCfpInput
func (_m *ICfpUsecase) GetCfp(c echo.Context, getCfpInput traceability.GetCfpInput) ([]traceability.CfpModel, error) {
	ret := _m.Called(c, getCfpInput)

	if len(ret) == 0 {
		panic("no return value specified for GetCfp")
	}

	var r0 []traceability.CfpModel
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, traceability.GetCfpInput) ([]traceability.CfpModel, error)); ok {
		return rf(c, getCfpInput)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, traceability.GetCfpInput) []traceability.CfpModel); ok {
		r0 = rf(c, getCfpInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]traceability.CfpModel)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, traceability.GetCfpInput) error); ok {
		r1 = rf(c, getCfpInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutCfp provides a mock function with given fields: c, putCfpInputs, operatorID
func (_m *ICfpUsecase) PutCfp(c echo.Context, putCfpInputs traceability.PutCfpInputs, operatorID string) ([]traceability.CfpModel, common.ResponseHeaders, error) {
	ret := _m.Called(c, putCfpInputs, operatorID)

	if len(ret) == 0 {
		panic("no return value specified for PutCfp")
	}

	var r0 []traceability.CfpModel
	var r1 common.ResponseHeaders
	var r2 error
	if rf, ok := ret.Get(0).(func(echo.Context, traceability.PutCfpInputs, string) ([]traceability.CfpModel, common.ResponseHeaders, error)); ok {
		return rf(c, putCfpInputs, operatorID)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, traceability.PutCfpInputs, string) []traceability.CfpModel); ok {
		r0 = rf(c, putCfpInputs, operatorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]traceability.CfpModel)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, traceability.PutCfpInputs, string) common.ResponseHeaders); ok {
		r1 = rf(c, putCfpInputs, operatorID)
	} else {
		r1 = ret.Get(1).(common.ResponseHeaders)
	}

	if rf, ok := ret.Get(2).(func(echo.Context, traceability.PutCfpInputs, string) error); ok {
		r2 = rf(c, putCfpInputs, operatorID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewICfpUsecase creates a new instance of ICfpUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICfpUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICfpUsecase {
	mock := &ICfpUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
