// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	traceability "data-spaces-backend/domain/model/traceability"
)

// ICfpUsecase is an autogenerated mock type for the ICfpUsecase type
type ICfpUsecase struct {
	mock.Mock
}

// GetCfp provides a mock function with given fields: c, getCfpModel
func (_m *ICfpUsecase) GetCfp(c echo.Context, getCfpModel traceability.GetCfpModel) ([]traceability.CfpModel, error) {
	ret := _m.Called(c, getCfpModel)

	var r0 []traceability.CfpModel
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, traceability.GetCfpModel) ([]traceability.CfpModel, error)); ok {
		return rf(c, getCfpModel)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, traceability.GetCfpModel) []traceability.CfpModel); ok {
		r0 = rf(c, getCfpModel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]traceability.CfpModel)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, traceability.GetCfpModel) error); ok {
		r1 = rf(c, getCfpModel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutCfp provides a mock function with given fields: c, cfpModels, operatorID
func (_m *ICfpUsecase) PutCfp(c echo.Context, cfpModels traceability.CfpModels, operatorID string) ([]traceability.CfpModel, error) {
	ret := _m.Called(c, cfpModels, operatorID)

	var r0 []traceability.CfpModel
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, traceability.CfpModels, string) ([]traceability.CfpModel, error)); ok {
		return rf(c, cfpModels, operatorID)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, traceability.CfpModels, string) []traceability.CfpModel); ok {
		r0 = rf(c, cfpModels, operatorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]traceability.CfpModel)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, traceability.CfpModels, string) error); ok {
		r1 = rf(c, cfpModels, operatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewICfpUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewICfpUsecase creates a new instance of ICfpUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewICfpUsecase(t mockConstructorTestingTNewICfpUsecase) *ICfpUsecase {
	mock := &ICfpUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
